
QuadDrone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c0c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000905  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <main>
  64:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinValue>:
#include "../BIT_MATH.h"
#include "DIO_register.h"
#include "DIO_interface.h"

void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinValCopy)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	84 30       	cpi	r24, 0x04	; 4
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_SetPinValue+0x22>
  8c:	ee c0       	rjmp	.+476    	; 0x26a <DIO_SetPinValue+0x1fe>
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	08 f0       	brcs	.+2      	; 0x96 <DIO_SetPinValue+0x2a>
  94:	ea c0       	rjmp	.+468    	; 0x26a <DIO_SetPinValue+0x1fe>
	{
		if ( u8PinValCopy == PIN_HIGH )
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_SetPinValue+0x32>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	49 f1       	breq	.+82     	; 0x104 <DIO_SetPinValue+0x98>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_SetPinValue+0x5a>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	61 f0       	breq	.+24     	; 0xdc <DIO_SetPinValue+0x70>
  c4:	d2 c0       	rjmp	.+420    	; 0x26a <DIO_SetPinValue+0x1fe>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	71 f1       	breq	.+92     	; 0x12c <DIO_SetPinValue+0xc0>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	e9 f1       	breq	.+122    	; 0x154 <DIO_SetPinValue+0xe8>
  da:	c7 c0       	rjmp	.+398    	; 0x26a <DIO_SetPinValue+0x1fe>
			{
			case PORTA: SET_BIT(PORTA_Register,u8PinIdCopy); break;
  dc:	ab e3       	ldi	r26, 0x3B	; 59
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	eb e3       	ldi	r30, 0x3B	; 59
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	48 2f       	mov	r20, r24
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinValue+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinValue+0x8a>
  fe:	84 2b       	or	r24, r20
 100:	8c 93       	st	X, r24
 102:	b3 c0       	rjmp	.+358    	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTB: SET_BIT(PORTB_Register,u8PinIdCopy); break;
 104:	a8 e3       	ldi	r26, 0x38	; 56
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e8 e3       	ldi	r30, 0x38	; 56
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	48 2f       	mov	r20, r24
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_SetPinValue+0xb6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_SetPinValue+0xb2>
 126:	84 2b       	or	r24, r20
 128:	8c 93       	st	X, r24
 12a:	9f c0       	rjmp	.+318    	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTC: SET_BIT(PORTC_Register,u8PinIdCopy); break;
 12c:	a5 e3       	ldi	r26, 0x35	; 53
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e5 e3       	ldi	r30, 0x35	; 53
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinValue+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinValue+0xda>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTD: SET_BIT(PORTD_Register,u8PinIdCopy); break;
 154:	a2 e3       	ldi	r26, 0x32	; 50
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e2 e3       	ldi	r30, 0x32	; 50
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinValue+0x106>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinValue+0x102>
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	77 c0       	rjmp	.+238    	; 0x26a <DIO_SetPinValue+0x1fe>
		    default : break;
			}
		}

		else if ( u8PinValCopy == PIN_LOW )
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	88 23       	and	r24, r24
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_SetPinValue+0x118>
 182:	73 c0       	rjmp	.+230    	; 0x26a <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_SetPinValue+0x182>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_SetPinValue+0x140>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_SetPinValue+0x158>
 1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_SetPinValue+0x1fe>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_SetPinValue+0x1ac>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_SetPinValue+0x156>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_SetPinValue+0x1d6>
 1c2:	53 c0       	rjmp	.+166    	; 0x26a <DIO_SetPinValue+0x1fe>
			{
			case PORTA: CLR_BIT(PORTA_Register,u8PinIdCopy); break;
 1c4:	ab e3       	ldi	r26, 0x3B	; 59
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	eb e3       	ldi	r30, 0x3B	; 59
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPinValue+0x176>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPinValue+0x172>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTB: CLR_BIT(PORTB_Register,u8PinIdCopy); break;
 1ee:	a8 e3       	ldi	r26, 0x38	; 56
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e8 e3       	ldi	r30, 0x38	; 56
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0x1a0>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0x19c>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	29 c0       	rjmp	.+82     	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTC: CLR_BIT(PORTC_Register,u8PinIdCopy); break;
 218:	a5 e3       	ldi	r26, 0x35	; 53
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e5 e3       	ldi	r30, 0x35	; 53
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinValue+0x1ca>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinValue+0x1c6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	14 c0       	rjmp	.+40     	; 0x26a <DIO_SetPinValue+0x1fe>
			case PORTD: CLR_BIT(PORTD_Register,u8PinIdCopy); break;
 242:	a2 e3       	ldi	r26, 0x32	; 50
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e2 e3       	ldi	r30, 0x32	; 50
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SetPinValue+0x1f4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SetPinValue+0x1f0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
		{
			/* Do nothing, Wrong Direction Required */
		}
	}

}
 26a:	27 96       	adiw	r28, 0x07	; 7
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_GetPinValue+0x6>
 282:	00 d0       	rcall	.+0      	; 0x284 <DIO_GetPinValue+0x8>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Valuecopy;

	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	08 f0       	brcs	.+2      	; 0x296 <DIO_GetPinValue+0x1a>
 294:	6b c0       	rjmp	.+214    	; 0x36c <DIO_GetPinValue+0xf0>
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	08 f0       	brcs	.+2      	; 0x29e <DIO_GetPinValue+0x22>
 29c:	67 c0       	rjmp	.+206    	; 0x36c <DIO_GetPinValue+0xf0>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	3d 83       	std	Y+5, r19	; 0x05
 2a6:	2c 83       	std	Y+4, r18	; 0x04
 2a8:	4c 81       	ldd	r20, Y+4	; 0x04
 2aa:	5d 81       	ldd	r21, Y+5	; 0x05
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	51 05       	cpc	r21, r1
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_GetPinValue+0x86>
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	91 05       	cpc	r25, r1
 2ba:	34 f4       	brge	.+12     	; 0x2c8 <DIO_GetPinValue+0x4c>
 2bc:	2c 81       	ldd	r18, Y+4	; 0x04
 2be:	3d 81       	ldd	r19, Y+5	; 0x05
 2c0:	21 15       	cp	r18, r1
 2c2:	31 05       	cpc	r19, r1
 2c4:	61 f0       	breq	.+24     	; 0x2de <DIO_GetPinValue+0x62>
 2c6:	52 c0       	rjmp	.+164    	; 0x36c <DIO_GetPinValue+0xf0>
 2c8:	4c 81       	ldd	r20, Y+4	; 0x04
 2ca:	5d 81       	ldd	r21, Y+5	; 0x05
 2cc:	42 30       	cpi	r20, 0x02	; 2
 2ce:	51 05       	cpc	r21, r1
 2d0:	51 f1       	breq	.+84     	; 0x326 <DIO_GetPinValue+0xaa>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	91 05       	cpc	r25, r1
 2da:	b9 f1       	breq	.+110    	; 0x34a <DIO_GetPinValue+0xce>
 2dc:	47 c0       	rjmp	.+142    	; 0x36c <DIO_GetPinValue+0xf0>
		{
		case PORTA: u8Valuecopy = GET_BIT(PINA_Register,u8PinIdCopy); break;
 2de:	e9 e3       	ldi	r30, 0x39	; 57
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	a9 01       	movw	r20, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_GetPinValue+0x7a>
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_GetPinValue+0x76>
 2fa:	ca 01       	movw	r24, r20
 2fc:	81 70       	andi	r24, 0x01	; 1
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	35 c0       	rjmp	.+106    	; 0x36c <DIO_GetPinValue+0xf0>
		case PORTB: u8Valuecopy = GET_BIT(PINB_Register,u8PinIdCopy); break;
 302:	e6 e3       	ldi	r30, 0x36	; 54
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	28 2f       	mov	r18, r24
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	a9 01       	movw	r20, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_GetPinValue+0x9e>
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_GetPinValue+0x9a>
 31e:	ca 01       	movw	r24, r20
 320:	81 70       	andi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	23 c0       	rjmp	.+70     	; 0x36c <DIO_GetPinValue+0xf0>
		case PORTC: u8Valuecopy = GET_BIT(PINC_Register,u8PinIdCopy); break;
 326:	e3 e3       	ldi	r30, 0x33	; 51
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a9 01       	movw	r20, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_GetPinValue+0xc2>
 33a:	55 95       	asr	r21
 33c:	47 95       	ror	r20
 33e:	8a 95       	dec	r24
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_GetPinValue+0xbe>
 342:	ca 01       	movw	r24, r20
 344:	81 70       	andi	r24, 0x01	; 1
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	11 c0       	rjmp	.+34     	; 0x36c <DIO_GetPinValue+0xf0>
		case PORTD: u8Valuecopy = GET_BIT(PIND_Register,u8PinIdCopy); break;
 34a:	e0 e3       	ldi	r30, 0x30	; 48
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_GetPinValue+0xe6>
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_GetPinValue+0xe2>
 366:	ca 01       	movw	r24, r20
 368:	81 70       	andi	r24, 0x01	; 1
 36a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do nothing, Wrong Direction Required */
	}

	return u8Valuecopy;
 36c:	89 81       	ldd	r24, Y+1	; 0x01

}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy,u8 u8PinDirCopy)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	27 97       	sbiw	r28, 0x07	; 7
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	89 83       	std	Y+1, r24	; 0x01
 394:	6a 83       	std	Y+2, r22	; 0x02
 396:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <DIO_SetPinDirection+0x22>
 39e:	ee c0       	rjmp	.+476    	; 0x57c <DIO_SetPinDirection+0x1fe>
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <DIO_SetPinDirection+0x2a>
 3a6:	ea c0       	rjmp	.+468    	; 0x57c <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == PIN_OUTPUT )
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <DIO_SetPinDirection+0x32>
 3ae:	6f c0       	rjmp	.+222    	; 0x48e <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	3f 83       	std	Y+7, r19	; 0x07
 3b8:	2e 83       	std	Y+6, r18	; 0x06
 3ba:	8e 81       	ldd	r24, Y+6	; 0x06
 3bc:	9f 81       	ldd	r25, Y+7	; 0x07
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	91 05       	cpc	r25, r1
 3c2:	49 f1       	breq	.+82     	; 0x416 <DIO_SetPinDirection+0x98>
 3c4:	2e 81       	ldd	r18, Y+6	; 0x06
 3c6:	3f 81       	ldd	r19, Y+7	; 0x07
 3c8:	22 30       	cpi	r18, 0x02	; 2
 3ca:	31 05       	cpc	r19, r1
 3cc:	2c f4       	brge	.+10     	; 0x3d8 <DIO_SetPinDirection+0x5a>
 3ce:	8e 81       	ldd	r24, Y+6	; 0x06
 3d0:	9f 81       	ldd	r25, Y+7	; 0x07
 3d2:	00 97       	sbiw	r24, 0x00	; 0
 3d4:	61 f0       	breq	.+24     	; 0x3ee <DIO_SetPinDirection+0x70>
 3d6:	d2 c0       	rjmp	.+420    	; 0x57c <DIO_SetPinDirection+0x1fe>
 3d8:	2e 81       	ldd	r18, Y+6	; 0x06
 3da:	3f 81       	ldd	r19, Y+7	; 0x07
 3dc:	22 30       	cpi	r18, 0x02	; 2
 3de:	31 05       	cpc	r19, r1
 3e0:	71 f1       	breq	.+92     	; 0x43e <DIO_SetPinDirection+0xc0>
 3e2:	8e 81       	ldd	r24, Y+6	; 0x06
 3e4:	9f 81       	ldd	r25, Y+7	; 0x07
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	91 05       	cpc	r25, r1
 3ea:	e9 f1       	breq	.+122    	; 0x466 <DIO_SetPinDirection+0xe8>
 3ec:	c7 c0       	rjmp	.+398    	; 0x57c <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: SET_BIT(DDRA_Register,u8PinIdCopy); break;
 3ee:	aa e3       	ldi	r26, 0x3A	; 58
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	ea e3       	ldi	r30, 0x3A	; 58
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_SetPinDirection+0x8e>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_SetPinDirection+0x8a>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
 414:	b3 c0       	rjmp	.+358    	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTB: SET_BIT(DDRB_Register,u8PinIdCopy); break;
 416:	a7 e3       	ldi	r26, 0x37	; 55
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e7 e3       	ldi	r30, 0x37	; 55
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_SetPinDirection+0xb6>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_SetPinDirection+0xb2>
 438:	84 2b       	or	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	9f c0       	rjmp	.+318    	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTC: SET_BIT(DDRC_Register,u8PinIdCopy); break;
 43e:	a4 e3       	ldi	r26, 0x34	; 52
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	e4 e3       	ldi	r30, 0x34	; 52
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 2e       	mov	r0, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_SetPinDirection+0xde>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_SetPinDirection+0xda>
 460:	84 2b       	or	r24, r20
 462:	8c 93       	st	X, r24
 464:	8b c0       	rjmp	.+278    	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTD: SET_BIT(DDRD_Register,u8PinIdCopy); break;
 466:	a1 e3       	ldi	r26, 0x31	; 49
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	e1 e3       	ldi	r30, 0x31	; 49
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	48 2f       	mov	r20, r24
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 2e       	mov	r0, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_SetPinDirection+0x106>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_SetPinDirection+0x102>
 488:	84 2b       	or	r24, r20
 48a:	8c 93       	st	X, r24
 48c:	77 c0       	rjmp	.+238    	; 0x57c <DIO_SetPinDirection+0x1fe>
			default : break;
			}
		}

		else if ( u8PinDirCopy == PIN_INPUT )
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	88 23       	and	r24, r24
 492:	09 f0       	breq	.+2      	; 0x496 <DIO_SetPinDirection+0x118>
 494:	73 c0       	rjmp	.+230    	; 0x57c <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	3d 83       	std	Y+5, r19	; 0x05
 49e:	2c 83       	std	Y+4, r18	; 0x04
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	9d 81       	ldd	r25, Y+5	; 0x05
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	91 05       	cpc	r25, r1
 4a8:	59 f1       	breq	.+86     	; 0x500 <DIO_SetPinDirection+0x182>
 4aa:	2c 81       	ldd	r18, Y+4	; 0x04
 4ac:	3d 81       	ldd	r19, Y+5	; 0x05
 4ae:	22 30       	cpi	r18, 0x02	; 2
 4b0:	31 05       	cpc	r19, r1
 4b2:	2c f4       	brge	.+10     	; 0x4be <DIO_SetPinDirection+0x140>
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	9d 81       	ldd	r25, Y+5	; 0x05
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	69 f0       	breq	.+26     	; 0x4d6 <DIO_SetPinDirection+0x158>
 4bc:	5f c0       	rjmp	.+190    	; 0x57c <DIO_SetPinDirection+0x1fe>
 4be:	2c 81       	ldd	r18, Y+4	; 0x04
 4c0:	3d 81       	ldd	r19, Y+5	; 0x05
 4c2:	22 30       	cpi	r18, 0x02	; 2
 4c4:	31 05       	cpc	r19, r1
 4c6:	89 f1       	breq	.+98     	; 0x52a <DIO_SetPinDirection+0x1ac>
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	9d 81       	ldd	r25, Y+5	; 0x05
 4cc:	83 30       	cpi	r24, 0x03	; 3
 4ce:	91 05       	cpc	r25, r1
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <DIO_SetPinDirection+0x156>
 4d2:	40 c0       	rjmp	.+128    	; 0x554 <DIO_SetPinDirection+0x1d6>
 4d4:	53 c0       	rjmp	.+166    	; 0x57c <DIO_SetPinDirection+0x1fe>
			{
			case PORTA: CLR_BIT(DDRA_Register,u8PinIdCopy); break;
 4d6:	aa e3       	ldi	r26, 0x3A	; 58
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	ea e3       	ldi	r30, 0x3A	; 58
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_SetPinDirection+0x176>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_SetPinDirection+0x172>
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	8c 93       	st	X, r24
 4fe:	3e c0       	rjmp	.+124    	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTB: CLR_BIT(DDRB_Register,u8PinIdCopy); break;
 500:	a7 e3       	ldi	r26, 0x37	; 55
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e7 e3       	ldi	r30, 0x37	; 55
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 2e       	mov	r0, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_SetPinDirection+0x1a0>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_SetPinDirection+0x19c>
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	8c 93       	st	X, r24
 528:	29 c0       	rjmp	.+82     	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTC: CLR_BIT(DDRC_Register,u8PinIdCopy); break;
 52a:	a4 e3       	ldi	r26, 0x34	; 52
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	e4 e3       	ldi	r30, 0x34	; 52
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_SetPinDirection+0x1ca>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_SetPinDirection+0x1c6>
 54c:	80 95       	com	r24
 54e:	84 23       	and	r24, r20
 550:	8c 93       	st	X, r24
 552:	14 c0       	rjmp	.+40     	; 0x57c <DIO_SetPinDirection+0x1fe>
			case PORTD: CLR_BIT(DDRD_Register,u8PinIdCopy); break;
 554:	a1 e3       	ldi	r26, 0x31	; 49
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e1 e3       	ldi	r30, 0x31	; 49
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	48 2f       	mov	r20, r24
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 2e       	mov	r0, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_SetPinDirection+0x1f4>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_SetPinDirection+0x1f0>
 576:	80 95       	com	r24
 578:	84 23       	and	r24, r20
 57a:	8c 93       	st	X, r24
		{
			/* Do nothing, Wrong Direction Required */
		}
	}

}
 57c:	27 96       	adiw	r28, 0x07	; 7
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	08 95       	ret

0000058e <DIO_TogglePinValue>:
void DIO_TogglePinValue(u8 u8PortIdCopy,u8 u8PinIdCopy)
{
 58e:	df 93       	push	r29
 590:	cf 93       	push	r28
 592:	00 d0       	rcall	.+0      	; 0x594 <DIO_TogglePinValue+0x6>
 594:	00 d0       	rcall	.+0      	; 0x596 <DIO_TogglePinValue+0x8>
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	89 83       	std	Y+1, r24	; 0x01
 59c:	6a 83       	std	Y+2, r22	; 0x02
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	84 30       	cpi	r24, 0x04	; 4
 5a2:	08 f0       	brcs	.+2      	; 0x5a6 <DIO_TogglePinValue+0x18>
 5a4:	72 c0       	rjmp	.+228    	; 0x68a <DIO_TogglePinValue+0xfc>
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	88 30       	cpi	r24, 0x08	; 8
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <DIO_TogglePinValue+0x20>
 5ac:	6e c0       	rjmp	.+220    	; 0x68a <DIO_TogglePinValue+0xfc>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	28 2f       	mov	r18, r24
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	3c 83       	std	Y+4, r19	; 0x04
 5b6:	2b 83       	std	Y+3, r18	; 0x03
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	9c 81       	ldd	r25, Y+4	; 0x04
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	91 05       	cpc	r25, r1
 5c0:	49 f1       	breq	.+82     	; 0x614 <DIO_TogglePinValue+0x86>
 5c2:	2b 81       	ldd	r18, Y+3	; 0x03
 5c4:	3c 81       	ldd	r19, Y+4	; 0x04
 5c6:	22 30       	cpi	r18, 0x02	; 2
 5c8:	31 05       	cpc	r19, r1
 5ca:	2c f4       	brge	.+10     	; 0x5d6 <DIO_TogglePinValue+0x48>
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	9c 81       	ldd	r25, Y+4	; 0x04
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	61 f0       	breq	.+24     	; 0x5ec <DIO_TogglePinValue+0x5e>
 5d4:	5a c0       	rjmp	.+180    	; 0x68a <DIO_TogglePinValue+0xfc>
 5d6:	2b 81       	ldd	r18, Y+3	; 0x03
 5d8:	3c 81       	ldd	r19, Y+4	; 0x04
 5da:	22 30       	cpi	r18, 0x02	; 2
 5dc:	31 05       	cpc	r19, r1
 5de:	71 f1       	breq	.+92     	; 0x63c <DIO_TogglePinValue+0xae>
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	83 30       	cpi	r24, 0x03	; 3
 5e6:	91 05       	cpc	r25, r1
 5e8:	e9 f1       	breq	.+122    	; 0x664 <DIO_TogglePinValue+0xd6>
 5ea:	4f c0       	rjmp	.+158    	; 0x68a <DIO_TogglePinValue+0xfc>
		{
		case PORTA: TOG_BIT(PORTA_Register,u8PinIdCopy); break;
 5ec:	ab e3       	ldi	r26, 0x3B	; 59
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	eb e3       	ldi	r30, 0x3B	; 59
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	02 2e       	mov	r0, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_TogglePinValue+0x7c>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_TogglePinValue+0x78>
 60e:	84 27       	eor	r24, r20
 610:	8c 93       	st	X, r24
 612:	3b c0       	rjmp	.+118    	; 0x68a <DIO_TogglePinValue+0xfc>
		case PORTB: TOG_BIT(PORTB_Register,u8PinIdCopy); break;
 614:	a8 e3       	ldi	r26, 0x38	; 56
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	e8 e3       	ldi	r30, 0x38	; 56
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	48 2f       	mov	r20, r24
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 2e       	mov	r0, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_TogglePinValue+0xa4>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	0a 94       	dec	r0
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_TogglePinValue+0xa0>
 636:	84 27       	eor	r24, r20
 638:	8c 93       	st	X, r24
 63a:	27 c0       	rjmp	.+78     	; 0x68a <DIO_TogglePinValue+0xfc>
		case PORTC: TOG_BIT(PORTC_Register,u8PinIdCopy); break;
 63c:	a5 e3       	ldi	r26, 0x35	; 53
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	e5 e3       	ldi	r30, 0x35	; 53
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	80 81       	ld	r24, Z
 646:	48 2f       	mov	r20, r24
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 2e       	mov	r0, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_TogglePinValue+0xcc>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_TogglePinValue+0xc8>
 65e:	84 27       	eor	r24, r20
 660:	8c 93       	st	X, r24
 662:	13 c0       	rjmp	.+38     	; 0x68a <DIO_TogglePinValue+0xfc>
		case PORTD: TOG_BIT(PORTD_Register,u8PinIdCopy); break;
 664:	a2 e3       	ldi	r26, 0x32	; 50
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e2 e3       	ldi	r30, 0x32	; 50
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	48 2f       	mov	r20, r24
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 2e       	mov	r0, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_TogglePinValue+0xf4>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_TogglePinValue+0xf0>
 686:	84 27       	eor	r24, r20
 688:	8c 93       	st	X, r24
	}
	else
	{
		/* Do nothing, Wrong Direction Required */
	}
}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <DIO_SetPortDirection>:

/* IO Ports */
void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy)
{
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	00 d0       	rcall	.+0      	; 0x69e <DIO_SetPortDirection+0x6>
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_SetPortDirection+0x8>
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
 6a4:	89 83       	std	Y+1, r24	; 0x01
 6a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	28 2f       	mov	r18, r24
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	3c 83       	std	Y+4, r19	; 0x04
 6b0:	2b 83       	std	Y+3, r18	; 0x03
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	9c 81       	ldd	r25, Y+4	; 0x04
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	91 05       	cpc	r25, r1
 6ba:	d1 f0       	breq	.+52     	; 0x6f0 <DIO_SetPortDirection+0x58>
 6bc:	2b 81       	ldd	r18, Y+3	; 0x03
 6be:	3c 81       	ldd	r19, Y+4	; 0x04
 6c0:	22 30       	cpi	r18, 0x02	; 2
 6c2:	31 05       	cpc	r19, r1
 6c4:	2c f4       	brge	.+10     	; 0x6d0 <DIO_SetPortDirection+0x38>
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	61 f0       	breq	.+24     	; 0x6e6 <DIO_SetPortDirection+0x4e>
 6ce:	1e c0       	rjmp	.+60     	; 0x70c <DIO_SetPortDirection+0x74>
 6d0:	2b 81       	ldd	r18, Y+3	; 0x03
 6d2:	3c 81       	ldd	r19, Y+4	; 0x04
 6d4:	22 30       	cpi	r18, 0x02	; 2
 6d6:	31 05       	cpc	r19, r1
 6d8:	81 f0       	breq	.+32     	; 0x6fa <DIO_SetPortDirection+0x62>
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	9c 81       	ldd	r25, Y+4	; 0x04
 6de:	83 30       	cpi	r24, 0x03	; 3
 6e0:	91 05       	cpc	r25, r1
 6e2:	81 f0       	breq	.+32     	; 0x704 <DIO_SetPortDirection+0x6c>
 6e4:	13 c0       	rjmp	.+38     	; 0x70c <DIO_SetPortDirection+0x74>
	{
	case PORTA : DDRA_Register = u8PortDirCopy; break;
 6e6:	ea e3       	ldi	r30, 0x3A	; 58
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	80 83       	st	Z, r24
 6ee:	0e c0       	rjmp	.+28     	; 0x70c <DIO_SetPortDirection+0x74>
	case PORTB : DDRB_Register = u8PortDirCopy; break;
 6f0:	e7 e3       	ldi	r30, 0x37	; 55
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	80 83       	st	Z, r24
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <DIO_SetPortDirection+0x74>
	case PORTC : DDRC_Register = u8PortDirCopy; break;
 6fa:	e4 e3       	ldi	r30, 0x34	; 52
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	8a 81       	ldd	r24, Y+2	; 0x02
 700:	80 83       	st	Z, r24
 702:	04 c0       	rjmp	.+8      	; 0x70c <DIO_SetPortDirection+0x74>
	case PORTD : DDRD_Register = u8PortDirCopy; break;
 704:	e1 e3       	ldi	r30, 0x31	; 49
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	8a 81       	ldd	r24, Y+2	; 0x02
 70a:	80 83       	st	Z, r24
	default: break;
	}

}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <DIO_SetPortValue>:
void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy)
{
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	00 d0       	rcall	.+0      	; 0x720 <DIO_SetPortValue+0x6>
 720:	00 d0       	rcall	.+0      	; 0x722 <DIO_SetPortValue+0x8>
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	3c 83       	std	Y+4, r19	; 0x04
 732:	2b 83       	std	Y+3, r18	; 0x03
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	9c 81       	ldd	r25, Y+4	; 0x04
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	91 05       	cpc	r25, r1
 73c:	d1 f0       	breq	.+52     	; 0x772 <DIO_SetPortValue+0x58>
 73e:	2b 81       	ldd	r18, Y+3	; 0x03
 740:	3c 81       	ldd	r19, Y+4	; 0x04
 742:	22 30       	cpi	r18, 0x02	; 2
 744:	31 05       	cpc	r19, r1
 746:	2c f4       	brge	.+10     	; 0x752 <DIO_SetPortValue+0x38>
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	61 f0       	breq	.+24     	; 0x768 <DIO_SetPortValue+0x4e>
 750:	1e c0       	rjmp	.+60     	; 0x78e <DIO_SetPortValue+0x74>
 752:	2b 81       	ldd	r18, Y+3	; 0x03
 754:	3c 81       	ldd	r19, Y+4	; 0x04
 756:	22 30       	cpi	r18, 0x02	; 2
 758:	31 05       	cpc	r19, r1
 75a:	81 f0       	breq	.+32     	; 0x77c <DIO_SetPortValue+0x62>
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	9c 81       	ldd	r25, Y+4	; 0x04
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	91 05       	cpc	r25, r1
 764:	81 f0       	breq	.+32     	; 0x786 <DIO_SetPortValue+0x6c>
 766:	13 c0       	rjmp	.+38     	; 0x78e <DIO_SetPortValue+0x74>
	{
	case PORTA : PORTA_Register = u8PortValCopy; break;
 768:	eb e3       	ldi	r30, 0x3B	; 59
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	80 83       	st	Z, r24
 770:	0e c0       	rjmp	.+28     	; 0x78e <DIO_SetPortValue+0x74>
	case PORTB : PORTB_Register = u8PortValCopy; break;
 772:	e8 e3       	ldi	r30, 0x38	; 56
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	8a 81       	ldd	r24, Y+2	; 0x02
 778:	80 83       	st	Z, r24
 77a:	09 c0       	rjmp	.+18     	; 0x78e <DIO_SetPortValue+0x74>
	case PORTC : PORTC_Register = u8PortValCopy; break;
 77c:	e5 e3       	ldi	r30, 0x35	; 53
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	80 83       	st	Z, r24
 784:	04 c0       	rjmp	.+8      	; 0x78e <DIO_SetPortValue+0x74>
	case PORTD : PORTD_Register = u8PortValCopy; break;
 786:	e2 e3       	ldi	r30, 0x32	; 50
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	80 83       	st	Z, r24
	default: break;
	}


}
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <DIO_TogglePortValue>:
void DIO_TogglePortValue(u8 u8PortIdCopy)
{
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <DIO_TogglePortValue+0x6>
 7a2:	0f 92       	push	r0
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	89 83       	std	Y+1, r24	; 0x01
	switch(u8PortIdCopy)
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	3b 83       	std	Y+3, r19	; 0x03
 7b2:	2a 83       	std	Y+2, r18	; 0x02
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	9b 81       	ldd	r25, Y+3	; 0x03
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	91 05       	cpc	r25, r1
 7bc:	e9 f0       	breq	.+58     	; 0x7f8 <DIO_TogglePortValue+0x5c>
 7be:	2a 81       	ldd	r18, Y+2	; 0x02
 7c0:	3b 81       	ldd	r19, Y+3	; 0x03
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	2c f4       	brge	.+10     	; 0x7d2 <DIO_TogglePortValue+0x36>
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	61 f0       	breq	.+24     	; 0x7e8 <DIO_TogglePortValue+0x4c>
 7d0:	2a c0       	rjmp	.+84     	; 0x826 <DIO_TogglePortValue+0x8a>
 7d2:	2a 81       	ldd	r18, Y+2	; 0x02
 7d4:	3b 81       	ldd	r19, Y+3	; 0x03
 7d6:	22 30       	cpi	r18, 0x02	; 2
 7d8:	31 05       	cpc	r19, r1
 7da:	b1 f0       	breq	.+44     	; 0x808 <DIO_TogglePortValue+0x6c>
 7dc:	8a 81       	ldd	r24, Y+2	; 0x02
 7de:	9b 81       	ldd	r25, Y+3	; 0x03
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	91 05       	cpc	r25, r1
 7e4:	c9 f0       	breq	.+50     	; 0x818 <DIO_TogglePortValue+0x7c>
 7e6:	1f c0       	rjmp	.+62     	; 0x826 <DIO_TogglePortValue+0x8a>
	{
	case PORTA : PORTA_Register ^= 0xFF; break;
 7e8:	ab e3       	ldi	r26, 0x3B	; 59
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
 7ec:	eb e3       	ldi	r30, 0x3B	; 59
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	80 95       	com	r24
 7f4:	8c 93       	st	X, r24
 7f6:	17 c0       	rjmp	.+46     	; 0x826 <DIO_TogglePortValue+0x8a>
	case PORTB : PORTB_Register ^= 0xFF; break;
 7f8:	a8 e3       	ldi	r26, 0x38	; 56
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e8 e3       	ldi	r30, 0x38	; 56
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	80 95       	com	r24
 804:	8c 93       	st	X, r24
 806:	0f c0       	rjmp	.+30     	; 0x826 <DIO_TogglePortValue+0x8a>
	case PORTC : PORTC_Register ^= 0xFF; break;
 808:	a5 e3       	ldi	r26, 0x35	; 53
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	e5 e3       	ldi	r30, 0x35	; 53
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	80 81       	ld	r24, Z
 812:	80 95       	com	r24
 814:	8c 93       	st	X, r24
 816:	07 c0       	rjmp	.+14     	; 0x826 <DIO_TogglePortValue+0x8a>
	case PORTD : PORTD_Register ^= 0xFF; break;
 818:	a2 e3       	ldi	r26, 0x32	; 50
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	e2 e3       	ldi	r30, 0x32	; 50
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 95       	com	r24
 824:	8c 93       	st	X, r24
	default: break;
	}

}
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	cf 91       	pop	r28
 82e:	df 91       	pop	r29
 830:	08 95       	ret

00000832 <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 u8PortIdCopy)
{
 832:	df 93       	push	r29
 834:	cf 93       	push	r28
 836:	00 d0       	rcall	.+0      	; 0x838 <DIO_GetPortValue+0x6>
 838:	00 d0       	rcall	.+0      	; 0x83a <DIO_GetPortValue+0x8>
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
 83e:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8Valuecopy;

	switch(u8PortIdCopy)
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	28 2f       	mov	r18, r24
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	3c 83       	std	Y+4, r19	; 0x04
 848:	2b 83       	std	Y+3, r18	; 0x03
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	91 05       	cpc	r25, r1
 852:	d1 f0       	breq	.+52     	; 0x888 <__stack+0x29>
 854:	2b 81       	ldd	r18, Y+3	; 0x03
 856:	3c 81       	ldd	r19, Y+4	; 0x04
 858:	22 30       	cpi	r18, 0x02	; 2
 85a:	31 05       	cpc	r19, r1
 85c:	2c f4       	brge	.+10     	; 0x868 <__stack+0x9>
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	9c 81       	ldd	r25, Y+4	; 0x04
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	61 f0       	breq	.+24     	; 0x87e <__stack+0x1f>
 866:	1e c0       	rjmp	.+60     	; 0x8a4 <__stack+0x45>
 868:	2b 81       	ldd	r18, Y+3	; 0x03
 86a:	3c 81       	ldd	r19, Y+4	; 0x04
 86c:	22 30       	cpi	r18, 0x02	; 2
 86e:	31 05       	cpc	r19, r1
 870:	81 f0       	breq	.+32     	; 0x892 <__stack+0x33>
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	9c 81       	ldd	r25, Y+4	; 0x04
 876:	83 30       	cpi	r24, 0x03	; 3
 878:	91 05       	cpc	r25, r1
 87a:	81 f0       	breq	.+32     	; 0x89c <__stack+0x3d>
 87c:	13 c0       	rjmp	.+38     	; 0x8a4 <__stack+0x45>
	{
	case PORTA :u8Valuecopy = PINA_Register; break;
 87e:	e9 e3       	ldi	r30, 0x39	; 57
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	89 83       	std	Y+1, r24	; 0x01
 886:	0e c0       	rjmp	.+28     	; 0x8a4 <__stack+0x45>
	case PORTB :u8Valuecopy = PINB_Register; break;
 888:	e6 e3       	ldi	r30, 0x36	; 54
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	89 83       	std	Y+1, r24	; 0x01
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__stack+0x45>
	case PORTC :u8Valuecopy = PINC_Register; break;
 892:	e3 e3       	ldi	r30, 0x33	; 51
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	89 83       	std	Y+1, r24	; 0x01
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__stack+0x45>
	case PORTD :u8Valuecopy = PIND_Register; break;
 89c:	e0 e3       	ldi	r30, 0x30	; 48
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	89 83       	std	Y+1, r24	; 0x01
	default: break;
	}

	return u8Valuecopy;
 8a4:	89 81       	ldd	r24, Y+1	; 0x01

}
 8a6:	0f 90       	pop	r0
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	cf 91       	pop	r28
 8b0:	df 91       	pop	r29
 8b2:	08 95       	ret

000008b4 <TIM1_voidInitialize>:
#include "../BIT_MATH.h"
#include "Timer_interface.h"
#include "Timer_register.h"


void TIM1_voidInitialize(void){
 8b4:	df 93       	push	r29
 8b6:	cf 93       	push	r28
 8b8:	cd b7       	in	r28, 0x3d	; 61
 8ba:	de b7       	in	r29, 0x3e	; 62
	//SETTING NON INVERTING MODE
	CLR_BIT(TCCR1A_Register,6);
 8bc:	af e4       	ldi	r26, 0x4F	; 79
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	ef e4       	ldi	r30, 0x4F	; 79
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	8f 7b       	andi	r24, 0xBF	; 191
 8c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,7);
 8ca:	af e4       	ldi	r26, 0x4F	; 79
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	ef e4       	ldi	r30, 0x4F	; 79
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	80 68       	ori	r24, 0x80	; 128
 8d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_Register,4);
 8d8:	af e4       	ldi	r26, 0x4F	; 79
 8da:	b0 e0       	ldi	r27, 0x00	; 0
 8dc:	ef e4       	ldi	r30, 0x4F	; 79
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	8f 7e       	andi	r24, 0xEF	; 239
 8e4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,5);
 8e6:	af e4       	ldi	r26, 0x4F	; 79
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	ef e4       	ldi	r30, 0x4F	; 79
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	80 62       	ori	r24, 0x20	; 32
 8f2:	8c 93       	st	X, r24

	//SETTING FAST PWM MODE
	CLR_BIT(TCCR1A_Register,0);
 8f4:	af e4       	ldi	r26, 0x4F	; 79
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	ef e4       	ldi	r30, 0x4F	; 79
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	8e 7f       	andi	r24, 0xFE	; 254
 900:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Register,1);
 902:	af e4       	ldi	r26, 0x4F	; 79
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	ef e4       	ldi	r30, 0x4F	; 79
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	82 60       	ori	r24, 0x02	; 2
 90e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,3);
 910:	ae e4       	ldi	r26, 0x4E	; 78
 912:	b0 e0       	ldi	r27, 0x00	; 0
 914:	ee e4       	ldi	r30, 0x4E	; 78
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	88 60       	ori	r24, 0x08	; 8
 91c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,4);
 91e:	ae e4       	ldi	r26, 0x4E	; 78
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	ee e4       	ldi	r30, 0x4E	; 78
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	80 61       	ori	r24, 0x10	; 16
 92a:	8c 93       	st	X, r24

	//SET PRESCALAR
	CLR_BIT(TCCR1B_Register,0);
 92c:	ae e4       	ldi	r26, 0x4E	; 78
 92e:	b0 e0       	ldi	r27, 0x00	; 0
 930:	ee e4       	ldi	r30, 0x4E	; 78
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	8e 7f       	andi	r24, 0xFE	; 254
 938:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Register,1);
 93a:	ae e4       	ldi	r26, 0x4E	; 78
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	ee e4       	ldi	r30, 0x4E	; 78
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	82 60       	ori	r24, 0x02	; 2
 946:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_Register,2);
 948:	ae e4       	ldi	r26, 0x4E	; 78
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	ee e4       	ldi	r30, 0x4E	; 78
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	8b 7f       	andi	r24, 0xFB	; 251
 954:	8c 93       	st	X, r24

}
 956:	cf 91       	pop	r28
 958:	df 91       	pop	r29
 95a:	08 95       	ret

0000095c <TIM1_voidSetTimerReg>:

void TIM1_voidSetTimerReg(u16 Copy_u16Value){
 95c:	df 93       	push	r29
 95e:	cf 93       	push	r28
 960:	00 d0       	rcall	.+0      	; 0x962 <TIM1_voidSetTimerReg+0x6>
 962:	cd b7       	in	r28, 0x3d	; 61
 964:	de b7       	in	r29, 0x3e	; 62
 966:	9a 83       	std	Y+2, r25	; 0x02
 968:	89 83       	std	Y+1, r24	; 0x01
	ICR1_Register=Copy_u16Value;
 96a:	e6 e4       	ldi	r30, 0x46	; 70
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	9a 81       	ldd	r25, Y+2	; 0x02
 972:	91 83       	std	Z+1, r25	; 0x01
 974:	80 83       	st	Z, r24
}
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <TIM1_A_voidSetCompareVal>:

void TIM1_A_voidSetCompareVal(u16 Copy_u16Value){
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	00 d0       	rcall	.+0      	; 0x986 <TIM1_A_voidSetCompareVal+0x6>
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	9a 83       	std	Y+2, r25	; 0x02
 98c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_Register=Copy_u16Value;
 98e:	ea e4       	ldi	r30, 0x4A	; 74
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	9a 81       	ldd	r25, Y+2	; 0x02
 996:	91 83       	std	Z+1, r25	; 0x01
 998:	80 83       	st	Z, r24
}
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <TIM1_B_voidSetCompareVal>:

void TIM1_B_voidSetCompareVal(u16 Copy_u16Value){
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <TIM1_B_voidSetCompareVal+0x6>
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
 9ae:	9a 83       	std	Y+2, r25	; 0x02
 9b0:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_Register=Copy_u16Value;
 9b2:	e8 e4       	ldi	r30, 0x48	; 72
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	9a 81       	ldd	r25, Y+2	; 0x02
 9ba:	91 83       	std	Z+1, r25	; 0x01
 9bc:	80 83       	st	Z, r24
}
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	cf 91       	pop	r28
 9c4:	df 91       	pop	r29
 9c6:	08 95       	ret

000009c8 <main>:
#include "STD_TYPES.h"
#include "MCAL/DIO_interface.h"
#include "MCAL/Timer_interface.h"
#include <util/delay.h>

void main(){
 9c8:	df 93       	push	r29
 9ca:	cf 93       	push	r28
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <main+0x6>
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62

	TIM1_voidInitialize();
 9d2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TIM1_voidInitialize>
	TIM1_voidSetTimerReg(20000);
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	9e e4       	ldi	r25, 0x4E	; 78
 9da:	0e 94 ae 04 	call	0x95c	; 0x95c <TIM1_voidSetTimerReg>
	u16 angleTime;
	DIO_SetPortDirection(PORTD,PORT_OUTPUT);
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	6f ef       	ldi	r22, 0xFF	; 255
 9e2:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPortDirection>
	TIM1_A_voidSetCompareVal(1100);
 9e6:	8c e4       	ldi	r24, 0x4C	; 76
 9e8:	94 e0       	ldi	r25, 0x04	; 4
 9ea:	0e 94 c0 04 	call	0x980	; 0x980 <TIM1_A_voidSetCompareVal>
}
 9ee:	0f 90       	pop	r0
 9f0:	0f 90       	pop	r0
 9f2:	cf 91       	pop	r28
 9f4:	df 91       	pop	r29
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
